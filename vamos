# this script will be used to compile and run the source code
# vamos file=a.cpp input=in.txt output=out.txt debug=1

#!/bin/zsh

filename=""

# set input and output to default stdin and stdout
input="/dev/stdin"
output="/dev/stdout"
debug=0

read -ra ADDR <<< "$@"

# iterate over the array
for element in "${ADDR[@]}"
do
    IFS='=' read -r key value <<< "$element"

    if [[ "$key" == "file" || "$key" == "filename" ]]; then
        filename="$value"
    elif [[ "$key" == "input" || "$key" == "in" ]]; then
        input="$value"
    elif [[ "$key" == "output" || "$key" == "out" ]]; then
        output="$value"
    elif [[ "$key" == "debug" || "$key" == "dbg" ]]; then
        debug="$value"
    fi
done

if [[ "$filename" == "" ]]; then
    # if number of arguments is greater or equal 1, then the filename is the first argument
    if [[ "$#" -ge 1 ]]; then
        filename="$1"
    fi

    if [[ "$#" -ge 2 ]]; then
        if [[ "$2" == "debug" || "$2" == "dbg" ]]; then
            debug=1
        else
            input="$2"
        fi
    fi

    if [[ "$#" -ge 3 ]]; then
        if [[ "$3" == "debug" || "$3" == "dbg" ]]; then
            debug=1
        else
            output="$3"
        fi
    fi

    if [[ "$#" -ge 4 ]]; then
        if [[ "$4" == "debug" || "$4" == "dbg" ]]; then
            debug=1
        fi
    fi
fi

if [[ "$input" == "?" ]]; then
    input="/dev/stdin"
fi

if [[ "$output" == "?" ]]; then
    output="/dev/stdout"
fi

if [[ "$filename" == "" ]]; then
    echo "No filename provided"
    echo "Usage: vamos file=<filename> [input=<input_file>] [output=<output_file>] [debug=<1|true|0|false>]"
    echo "Usage: vamos <filename> [<input_file>|?] [<output_file>|?] [debug|dbg]"
    exit 1
fi


if [[ "$debug" == "1" || "$debug" == "true" ]]; then
    debug="-g -DDEBUG"
else 
    debug=""
fi

# compile and run the code

if [[ "$#" -eq 2 && "$2" == "normal" ]]; then
    input="/dev/stdin"
    output="/dev/stdout"
    debug=""
    g++ "$filename"
else 
    g++ -std=c++17 -O2 -Wall -Werror -Wextra -Wno-unused-result -Wno-char-subscripts -Wshadow -Wfloat-equal -Wconversion -Wformat-signedness -Wvla -Wduplicated-cond -Wlogical-op -Wredundant-decls -ggdb3 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_FORTIFY_SOURCE=2 -fsanitize=undefined,address,float-divide-by-zero,float-cast-overflow -fno-omit-frame-pointer -fno-optimize-sibling-calls -fstack-protector-all -fno-sanitize-recover=all -fstack-clash-protection -D_GLIBCXX_ASSERTIONS "$filename" $debug
fi

echo "Filename: $filename"
echo "Input:    $input"
echo "Output:   $output"
if [[ "$debug" == "" ]]; then
    echo "Debug:    false"
else
    echo "Debug:    true"
fi

if [[ $? -eq 0 ]]; then
    # print the Compilation successful message in green
    tput setaf 2
    echo "Compilation successful"
    tput sgr0
    echo "Running the code"
    ./a.out < "$input" > "$output"

    rm a.out
else
    # print the Compilation failed message in red
    tput setaf 1
    echo "Compilation failed"
    tput sgr0
fi
